# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

"""

from keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D, BatchNormalization, Activation, GlobalAveragePooling2D, Reshape
from keras.models import Model
from keras.optimizers import Adam
from keras.datasets import cifar10
from matplotlib import pyplot as plt

(X_train, y_train), (X_test, y_test) = cifar10.load_data()
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255

encoder_layers = [
    Conv2D(32, (3,3), padding='same', input_shape=X_train.shape[1:]),
    BatchNormalization(),
    Activation('relu'),
    MaxPooling2D(pool_size=(2,2)),
    Conv2D(64, (3,3), padding='same'),
    BatchNormalization(),
    Activation('relu'),
    MaxPooling2D(pool_size=(2,2)),
    Conv2D(128, (3,3), padding='same'),
    BatchNormalization(),
    Activation('relu'),
    GlobalAveragePooling2D()
]

decoder_layers = [
    Dense(128*8*8, activation='relu'),
    Reshape((8,8,128)),
    UpSampling2D((2,2)),
    Conv2D(64, (3,3), padding='same', activation='relu'),
    UpSampling2D((2,2)),
    Conv2D(32, (3,3), padding='same', activation='relu'),
    Conv2D(3, (3,3), padding='same', activation='sigmoid')
]

input_img = Input(shape=X_train.shape[1:])
encoded = input_img
for layer in encoder_layers:
  encoded = layer(encoded)

decoded = encoded
for layer in decoder_layers:
    decoded = layer(decoded)

autoencoder = Model(input_img, decoded)


autoencoder.compile(optimizer=Adam(), loss='binary_crossentropy')


autoencoder.fit(X_train, X_train, epochs=50, batch_size=256, validation_data=(X_test, X_test))

encoder = Model(input_img, encoded)

encoded_imgs = encoder.predict(X_test)


decoded_imgs = autoencoder.predict(X_test)

# Compare the original and decoded images
n = 10  # number of images to be displayed
plt.figure(figsize=(20, 4))
for i in range(n):
    # Original images
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(X_test[i].reshape(32, 32, 3))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

    # Decoded images
    ax = plt.subplot(2, n, i + 1 + n)
    plt.imshow(decoded_imgs[i].reshape(32, 32, 3))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()